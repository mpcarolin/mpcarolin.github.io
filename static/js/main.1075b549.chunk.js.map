{"version":3,"sources":["components/Projects/Projects.js","components/Blog/Blog.js","components/About/About.js","components/Layout.js","serviceWorker.js","index.js"],"names":["projectComparator","p1","p2","Date","updated_at","Project","props","react_default","a","createElement","className","href","project","html_url","name","language","description","Projects","state","projects","_this2","this","Promise","resolve","reject","axios","get","then","response","status","data","map","p","fork","setState","filter","stargazers_count","sort","Projects_Project","key","Component","Blog","links","route","AboutLink","link","pages","component","About_AboutLink","NavLink","navClass","isCurrent","terminalClass","window","location","pathname","Link","to","NavLinks","containerClass","Layout_NavLink","currentPage","Layout","BrowserRouter","Layout_NavLinks","page","Route","exact","path","Boolean","hostname","match","ReactDOM","render","src_components_Layout","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1075b549.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport style from './Projects.css'\nimport axios from 'axios'\n\nconst projectComparator = (p1, p2) => {\n  let date = new Date(p1.updated_at)  \n  let date2 = new Date(p2.updated_at)  \n  return -1 * (date - date2)\n}\n\nconst roles = {\n  'clojure-turtle': 'Contributor',\n  'reader-view': 'Contributor',\n}\n\n\nconst getProjects = () => {\n  return new Promise((resolve, reject) => {\n    axios.get(\"https://api.github.com/users/mpcarolin/repos\").then(response => {\n      if (response.status === 200) {\n        resolve(response.data.map(p => {\n          p.name += p.fork ? ' (fork)': ''\n          return p\n        }))\n      } else {\n        reject(response.status)\n      }\n    }) \n  })\n}\n\nconst Project = (props) => {\n  return (\n    <div className='project'>\n      <div className='project-header'>\n        <span className='project-name'> \n          <a href={props.project.html_url}>{ props.project.name }</a>\n        </span>\n      </div>\n      <div className='project-content'>\n        <span className='project-lang'>{props.project.language}</span>\n        <p>{ props.project.description }</p> \n      </div>\n    </div>\n  ) \n}\n\nclass Projects extends Component {\n  state = {\n    projects: []\n  }\n\n  componentDidMount () {\n    getProjects().then(projects => {\n      this.setState({ projects })  \n    })\n  }\n\n  render() {\n    return (\n      <div className='projects-container'>\n        {\n          this.state.projects\n            .filter(p => (p.stargazers_count > 0))\n            .sort(projectComparator)\n            .map(p => <Project project={p} key={p.name} />)\n        }\n      </div>\n    )\n  }\n}\n\nexport default Projects;\n","import React, { Component } from 'react';\nimport './Blog.css';\n\nclass Blog extends Component {\n  render() {\n    return (\n    \t<div className='blog-container'>\n\t    \t<i>Coming soon</i>\n    \t</div>\n    );\n  }\n}\n\nexport default Blog;\n","import React, { Component } from 'react';\nimport './About.css';\n\nconst description =  `\n\tHi, I'm Michael Carolin: a Software Engineer who likes to build web applications, explore\n\tfunctional programming, and sometimes write about software design, mechanical keyboards, and science fiction.\n`\n\nconst links = [\n\t{\n\t\t'name': 'Contact',\n\t\t'route': 'mailto:mpcarolin.dev@gmail.com'\n\t},\n\t{\n\t\t'name': 'LinkedIn',\n\t\t'route': 'http://www.linkedin.com/in/mpcarolin'\n\t},\n\t{\n\t\t'name': 'Github',\n\t\t'route': 'https://github.com/mpcarolin'\n\t}\n]\n\nconst AboutLink = (props) => {\n\treturn (\n\t\t<h4>\n\t\t\t<a className='about-link' href={props.link.route}>{props.link.name}</a>\n\t\t</h4>\t\n\t)\n\n}\n\nclass About extends Component {\n  render() {\n    return (\n    \t<div className='about-container'>\n\t    \t<h3 className='about-header'>About me</h3>\n\t\t\t<p className='about-description'>{ description }</p>\n\t\t\t{\n\t\t\t\tlinks.map(link => <AboutLink link={link} key={link.name} />)\n\t\t\t}\n    \t</div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport style from './Layout.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Projects from './Projects/Projects.js'\nimport Blog from './Blog/Blog.js'\nimport About from './About/About.js'\n\n// pages \nconst pages = [\n  { name: \"projects\", route: \"/projects\", component: Projects },\n  { name: \"blog\", route: \"/blog\", component: Blog },\n  { name: \"about\", route: \"/about\", component: About }\n]\n\n// const SITE_NAME = \"michael carolin\"\nconst SITE_NAME = \"recurse-carefully\"\n\nconst NavLink = (props) => {\n  const navClass = \"nav-link \" + (props.isCurrent ? \"selected\" : \"\")\n  const show = (page) => (page === window.location.pathname)\n  const terminalClass = show(props.link.route) ? '' : 'hide'\n  return (\n    <span className=\"nav-link-flex-container\" key={ props.link.name }>\n      <li className={navClass}>\n        <span className={terminalClass}>&gt;_</span>\n        <Link className=\"router-link\" to={props.link.route}>{ props.link.name }</Link>\n      </li>\n    </span>\n  )\n}\n\nconst NavLinks = (props) => {\n  return (\n    <ul className={ props.containerClass || \"\" }>\n      { \n        props.links.map(link => <NavLink key={link.route} link={link} isCurrent={ (link.route === props.currentPage) }/>)\n      }\n    </ul>\n  ) \n}\n\n// Navigation and router layout for application. Will render page content \n// within layout frame of the navigation components, depending on the\n// URL routed to\nclass Layout extends Component {\n  state = {\n    currentPage: \"/\",\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"site-root\">\n          <div className='nav-bar-container'>\n            <div className=\"nav-title\">\n              <a href=\"/\">{SITE_NAME}</a>\n            </div>\n            <NavLinks links={pages.filter(p => p.route !== '/')} \n                      currentPage={this.state.currentPage}\n                      containerClass=\"nav-link-desktop-container\" />\n          </div>\n          <div className='content-container'>\n          { \n            // render the exact matched component from the route\n            pages.map(page => <Route exact key={page.route} \n                                           path={page.route} \n                                           component={page.component} />)\n          }\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Layout from './components/Layout.js'\nimport * as serviceWorker from './serviceWorker';\nimport AppStyling from './App.css'\n\nReactDOM.render(<Layout />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}